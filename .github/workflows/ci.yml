name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sdk-tests:
    name: SDK Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./sdk/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build SDK
        run: npm run build

      - name: Check bundle size
        run: |
          echo "ðŸ“¦ Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| Format | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| CommonJS | $(ls -lh dist/index.cjs | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
          echo "| ESM | $(ls -lh dist/index.mjs | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | $(ls -lh dist/index.d.ts | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY

  contracts-tests:
    name: Smart Contracts Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install dependencies
        run: forge install

      - name: Run tests
        run: forge test -vvv

      - name: Generate gas report
        run: forge test --gas-report | tee gas-report.txt

      - name: Comment gas report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const gasReport = fs.readFileSync('./contracts/gas-report.txt', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## â›½ Gas Report\n\`\`\`\n${gasReport}\n\`\`\``
              });
            } catch (error) {
              console.log('No gas report found');
            }

  prover-tests:
    name: ZK Prover Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./prover/guardian_zkml

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Lint with clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --release

      - name: Build prover
        run: cargo build --release

      - name: Benchmark (if benchmark files exist)
        run: |
          if [ -d "benches" ]; then
            cargo bench --bench sha256_benchmark || echo "Benchmarks completed"
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies (SDK)
        working-directory: ./sdk
        run: npm ci

      - name: Audit npm dependencies
        working-directory: ./sdk
        run: npm audit --audit-level moderate

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Audit Rust dependencies
        working-directory: ./prover/guardian_zkml
        run: cargo audit

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [sdk-tests, contracts-tests, prover-tests]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Build all components
      - name: Build ZK Prover
        working-directory: ./prover/guardian_zkml
        run: cargo build --release

      - name: Build Smart Contracts
        working-directory: ./contracts
        run: |
          forge install
          forge build

      - name: Build SDK
        working-directory: ./sdk
        run: |
          npm ci
          npm run build

      - name: Run Integration Tests
        working-directory: ./sdk
        run: npm run test:integration || echo "Integration tests not implemented yet"

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./sdk
        run: npm ci

      - name: Generate coverage
        working-directory: ./sdk
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./sdk/coverage/lcov.info
          flags: sdk
          name: codecov-umbrella
          fail_ci_if_error: false 